=== empty object
{}
---
{}

=== empty array
[]
---
[]

=== null literal
null
---
null

=== boolean true
true
---
true

=== boolean false
false
---
false

=== integer zero
0
---
0

=== integer negative zero
-0
---
-0

=== integer positive
123
---
123

=== integer negative
-456
---
-456

=== integer 2^53-1 (safe JS max)
9007199254740991
---
9007199254740991

=== float simple
3.14
---
3.14

=== float negative
-0.125
---
-0.125

=== float many fraction digits
1.000000000123
---
1.000000000123

=== float with exponent (lowercase)
1e6
---
1e6

=== float with exponent (uppercase, positive sign)
2E+8
---
2E+8

=== float with negative exponent
7e-3
---
7e-3

=== float decimal mantissa with exponent
6.022e23
---
6.022e23

=== empty string
""
---
""

=== simple ascii string
"Hello, world!"
---
"Hello, world!"

=== string with escaped quote
"He said: \"JSON is great.\""
---
"He said: \"JSON is great.\""

=== string with backslash
"Path C:\\\\Program Files\\\\App"
---
"Path C:\\\\Program Files\\\\App"

=== string with solidus
"Use https:\/\/example.com\/api"
---
"Use https:\/\/example.com\/api"

=== string with control escapes
"\b\f\n\r\t"
---
"\b\f\n\r\t"

=== string with unicode escape
"\u263A"
---
"\u263A"

=== string with surrogate pair (smiling face)
"\uD83D\uDE00"
---
"\uD83D\uDE00"

=== string with actual emoji
"😀 😁 😂 🤣 😜"
---
"😀 😁 😂 🤣 😜"

=== multilingual string
"Привет 世界 مرحبا"
---
"Привет 世界 مرحبا"

=== string with null and unit separators
"\u0000\u001F"
---
"\u0000\u001F"

=== simple object one pair
{"a":1}
---
{"a":1}

=== object with multiple types
{"n":null,"t":true,"f":false,"i":42,"d":3.5,"s":"ok"}
---
{"n":null,"t":true,"f":false,"i":42,"d":3.5,"s":"ok"}

=== nested object
{"outer":{"inner":{"key":"value"}}}
---
{"outer":{"inner":{"key":"value"}}}

=== object with empty key
{"": "empty-key"}
---
{"": "empty-key"}

=== object with special character keys
{"a-b":1,"a b":2,"a:b":3,"a,b":4}
---
{"a-b":1,"a b":2,"a:b":3,"a,b":4}

=== object with escaped newline in key
{"a\nb":"c"}
---
{"a\nb":"c"}

=== array single element
[1]
---
[1]

=== array of integers
[0,1,2,3,4,5,6,7,8,9]
---
[0,1,2,3,4,5,6,7,8,9]

=== array of booleans
[true,false,true,false]
---
[true,false,true,false]

=== array of nulls
[null,null,null]
---
[null,null,null]

=== array mixed types
[null,true,42,3.14,"x",{"a":1},[2,3]]
---
[null,true,42,3.14,"x",{"a":1},[2,3]]

=== array of arrays
[[1,2],[3,4],[5,6]]
---
[[1,2],[3,4],[5,6]]

=== whitespace variations (object)
{  "a" : 1 , "b" :
 [ 1 , 2 , 3 ] ,
 "c" :
 { "d" : "e" }  }
---
{"a": 1, "b": [ 1 , 2 , 3 ], "c": { "d": "e" }}

=== whitespace variations (array)
[  1 ,  { "x" : 2 }  , [ 3 , 4 ]  ]
---
[1, { "x": 2 }, [ 3, 4 ]]

=== object with unicode and escapes mixed
{"text":"Line1\nLine2\u263A","emoji":"\uD83D\uDE80","slash":"a\/b","quote":"\""}
---
{"text":"Line1\nLine2\u263A","emoji":"\uD83D\uDE80","slash":"a\/b","quote":"\""}

=== string containing all common escapes together
"\\\"\/\b\f\n\r\t"
---
"\\\"\/\b\f\n\r\t"

=== array with empty structures nested
[[],{},[[],{}],{}]
---
[[],{},[[],{}],{}]

=== object trailing comma
{"a":1,}
---
{"a":1}

=== array trailing comma
[1,2,3,]
---
[1,2,3]

=== nested trailing commas
{"a":[1,2,], "b":{"x":1,},}
---
{"a":[1,2],"b":{"x":1}}

=== trailing comma after comment (object)
{
  "a": 1, # keep a
}
---
{"a":1}

=== trailing comma after comment (array)
[
  1, # first
]
---
[1]

=== array of objects with trailing commas
[
  {"id":1,},
  {"id":2,},
]
---
[{"id":1},{"id":2}]

=== object with last value array trailing comma
{"nums":[10,20,30,],}
---
{"nums":[10,20,30]}

=== single-element array with trailing comma
[42,]
---
[42]

=== single-pair object with trailing comma and spaces
{ "k": "v",  }
---
{"k":"v"}

=== trailing comma and mixed whitespace
{
  "x" : {"y" : [0,1,2,] ,} ,
}
---
{"x":{"y":[0,1,2]}}

=== full-line comment before object
# top-level note
{"a":1}
---
{"a":1}

=== multiple full-line comment before object + newlines
# comment 1
# comment 2
# comment 3


{"a":1}
---
{"a":1}

=== inline comment after pair
{"a":1 # apples
}
---
{"a":1}

=== inline comment after closing brace
{"a":1} # done
---
{"a":1}

=== comments between entries (object)
{
  "a": 1,  # first
  # mid-line comment
  "b": 2
}
---
{"a":1,"b":2}

=== comments between elements (array)
[
  1,  # one
  # two incoming
  2,
  3 # last
]
---
[1,2,3]

=== comment between key and colon
{
  "a" # key a
  : 1
}
---
{"a":1}

=== comment between colon and value
{
  "a": # value follows
  1
}
---
{"a":1}

=== nested structure with comments
{
  "obj": {
    # inside obj
    "k": "v" # end
  },
  "arr": [
    # within array
    1,2 # end
  ] # outer end
}
---
{"obj":{"k":"v"},"arr":[1,2]}

=== top-level number with trailing comment
123 # count
---
123

=== string containing hash (not a comment)
"# not a comment"
---
"# not a comment"

=== object with comment and trailing comma
{
  "a": 1, # trailing comma ok
}
---
{"a":1}

=== array with comment and trailing comma
[
  "x", # keep x
]
---
["x"]

=== trailing comma on both levels with comments
{
  "inner": {
    "list": [
      1, # a
      2, # b
    ], # list end
  }, # inner end
}
---
{"inner":{"list":[1,2]}}

=== trailing comma after multiline string with comment
{
  "text": "Line1\nLine2", # trailing
}
---
{"text":"Line1\nLine2"}

=== comments around commas in array
[ 1 # a
, 2 # b
, 3 # c
]
---
[1,2,3]

=== array of objects with inline comments
[
  {"a":1} # first
  , {"a":2} # second
]
---
[{"a":1},{"a":2}]

=== comment at EOF
{"a":1} # EOF
---
{"a":1}

=== multiple comment at EOF
{"a":1} # comment 1
# comment 2
# comment 3
---
{"a":1}

=== object with newline separators
{"a":1
"b":2}
---
{"a":1,"b":2}

=== array with newline separators
[1
2
3]
---
[1,2,3]

=== nested with newline separators
{
  "a": [
    1
    2
    3
  ]
  "b": {
    "x": true
    "y": null
  }
}
---
{"a":[1,2,3],"b":{"x":true,"y":null}}

=== mix commas and newlines (array)
[0
1,2
3]
---
[0,1,2,3]

=== mix commas and newlines (object)
{"a":1
,"b":2
,"c":3}
---
{"a":1,"b":2,"c":3}

=== array of objects with newline separators
[
  {"id":1}
  {"id":2}
  {"id":3}
]
---
[{"id":1},{"id":2},{"id":3}]

=== object with arrays using newline separators
{
  "nums": [
    10
    20
    30
  ]
  "strs": [
    "a"
    "b"
  ]
}
---
{"nums":[10,20,30],"strs":["a","b"]}

=== array with comments and newline separators
[
  1  # one
  2  # two
  3  # three
]
---
[1,2,3]

=== object with comments and newline separators
{
  "a": 1  # first
  "b": 2  # second
  # end
}
---
{"a":1,"b":2}

=== consecutive newlines as separators (array)
[1

2



3]
---
[1,2,3]

=== consecutive newlines as separators (object)
{
  "a":1


  "b":2
}
---
{"a":1,"b":2}

=== array with trailing newline before close
[42

]
---
[42]

=== object with trailing newline before close
{
  "k": "v"

}
---
{"k":"v"}

=== interleaved comments and newlines (array)
[
  # start
  100
  # middle
  200
  # end
]
---
[100,200]

=== interleaved comments and newlines (object)
{
  # start
  "x": true
  # mid
  "y": false
}
---
{"x":true,"y":false}

=== array of arrays with newline separators
[
  [1
   2]
  [3
   4]
]
---
[[1,2],[3,4]]

=== object with special character keys (newline separators)
{
  "a-b":1
  "a b":2
  "a:b":3
  "a,b":4
}
---
{"a-b":1,"a b":2,"a:b":3,"a,b":4}

=== unicode values with newline separators
{
  "text": "Привет"
  "emoji": "😀"
  "u": "\u263A"
}
---
{"text":"Привет","emoji":"😀","u":"\u263A"}

=== exponents with newline separators (keep numeric forms)
[
  1e3
  2E+2
  7e-1
]
---
[1e3,2E+2,7e-1]

=== mixed whitespace + newline separators
{  "a":1
,  "b": { "x":2
          "y":3 }
,  "c": [ 4
          5
          6 ]  }
---
{"a":1,"b":{"x":2,"y":3},"c":[4,5,6]}

=== mixed whitespace + comment + newline separator + trailing comma
{  "a": 1  # comment
,  }
---
{"a":1}
