import path from 'node:path'
import fs from 'node:fs'
import os from 'node:os'
import process from 'node:process'
import { Bench, type Task } from 'tinybench'

import * as MAML from 'maml.js'
import YAML from 'yaml'
import YAML2 from 'js-yaml'
import YAML3 from 'yaml-js'
import INI from 'ini'
import TOML from 'toml'
import TOML2 from '@iarna/toml'

const __dirname = path.dirname(new URL(import.meta.url).pathname)
const root = path.resolve(__dirname, '..')
const outfile = path.resolve(root, 'BENCHMARK.md')

const maml = fs.readFileSync(path.resolve(root, 'test/fixtures/basic.maml'), 'utf8')
const data = MAML.parse(maml)
const fixtures: Record<string, string> = {
  maml,
  json: JSON.stringify(data, null, 4),
  yaml: YAML.stringify(data),
  ini: INI.stringify(data),
  toml: TOML2.stringify(data)
}

type Tool = {
  ref?: string
  name: string
  api: {
    stringify?: (data: any) => string
    parse(raw: string): any
  },
  fixtures: {
    stringify: any
    parse: string
  },
}
const tools: Tool[] = [
  {
    name: 'maml.js',
    ref: 'https://github.com/maml-dev/maml.js',
    api: MAML,
    fixtures: {
      stringify: data,
      parse: fixtures.maml
    }
  },
  {
    name: 'yaml',
    ref: 'https://github.com/eemeli/yaml',
    api: YAML,
    fixtures: {
      stringify: data,
      parse: fixtures.yaml
    }
  },
  {
    name: 'js-yaml',
    ref: 'https://github.com/nodeca/js-yaml',
    api: {
      stringify: YAML2.dump,
      parse: YAML2.load
    },
    fixtures: {
      stringify: data,
      parse: fixtures.yaml
    }
  },
  {
    name: 'yaml-js',
    ref: 'https://github.com/connec/yaml-js',
    api: {
      stringify: YAML3.dump,
      parse: YAML3.load
    },
    fixtures: {
      stringify: data,
      parse: fixtures.yaml
    }
  },
  {
    name: 'toml',
    ref: 'https://github.com/BinaryMuse/toml-node',
    api: TOML,
    fixtures: {
      stringify: data,
      parse: fixtures.toml
    }
  },
  {
    name: '@iarna/toml',
    ref: 'https://github.com/iarna/iarna-toml',
    api: TOML2,
    fixtures: {
      stringify: data,
      parse: fixtures.toml
    }
  },
  {
    name: 'ini',
    ref: 'https://github.com/npm/ini',
    api: INI,
    fixtures: {
      stringify: data,
      parse: fixtures.ini
    }
  },
]

const suites: {
  title: string
  method: keyof Tool['api']
}[] = [
  {
    title: 'Parse',
    method: 'parse'
  },
  {
    title: 'Stringify',
    method: 'stringify'
  }
]


interface NamedResult {
  name: string
  result: NonNullable<Task['result']>
}

function systemNote(): string {
  const platform = `${os.type()} ${os.release()} (${os.platform()} ${os.arch()})`
  const cpu = os.cpus()[0]?.model ?? 'Unknown CPU'
  const cores = os.cpus().length
  const ram = `${(os.totalmem() / 1024 / 1024 / 1024).toFixed(1)} GB`
  const node = process.version

  return `**System Info**
  - ${cpu} (${cores} cores), ${ram}
  - ${platform}
  - Node.js ${node}
`
}

function toMarkdown(results: NamedResult[]): string {
  // sort best → worst by ops/sec
  const sorted = results.sort((a, b) => b.result.hz - a.result.hz)
  const bestHz = sorted[0].result.hz
  const headers = ['#', 'Package', 'Ops/sec', 'Avg time (ms)', '± %', 'slower x']
  const rows = sorted.map((r, i) => {
    const { hz, mean, sd } = r.result
    const percent = (sd / mean) * 100

    return [
      (i + 1).toString(),
      r.name,
      hz.toFixed(2),
      mean.toFixed(3),
      `±${percent.toFixed(2)}%`,
      (bestHz / hz).toFixed(2),
    ]
  })

  const table = [
    `| ${headers.join(' | ')} |`,
    `| ${headers.map((_, i) => '---' + (i > 1 ? ':' : '')).join(' | ')} |`,
    ...rows.map(row => `| ${row.join(' | ')} |`)
  ]

  return table.join('\n')
}


let output = `# Benchmarks
> Autogenerated by [\`scripts/build-bench-md.ts\`](./scripts/build-bench-md.ts)

${systemNote()}
`

for (const {title, method} of suites) {
  const bench = new Bench({ time: 200 })
  const results: NamedResult[] = []

  for (const {name, api, fixtures, ref} of tools) {
    const fn = api[method]
    const input = fixtures[method]
    if (typeof fn !== 'function') continue

    bench.add(`[\`${name}\`](${ref})`, () => fn(input))
  }

  for (const task of bench.tasks) {
    await task.run()
    if (task.result) {
      results.push({ name: task.name, result: task.result })
    }
  }

  output += `## ${title}
${toMarkdown(results)}
`
}

fs.writeFileSync(outfile, output)
